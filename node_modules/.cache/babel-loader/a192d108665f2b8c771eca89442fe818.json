{"ast":null,"code":"var _jsxFileName = \"C:\\\\work\\\\REACT-HW\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\ContactList\\\\ContactList.jsx\";\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactList = _ref => {\n  let {\n    contacts,\n    filter,\n    onDeleteContact\n  } = _ref;\n  const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim()));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: filter === '' ? contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [contact.name, \": \", contact.number]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => onDeleteContact(contact.name),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 15\n      }, this)]\n    }, contact.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)) : filteredContacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [contact.name, \": \", contact.number]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => onDeleteContact(contact.name),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }, this)]\n    }, contact.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ContactList;\nContactList.propTypes = {\n  filter: PropTypes.string.isRequired,\n  contacts: PropTypes.array.isRequired\n};\nexport default ContactList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["C:/work/REACT-HW/goit-react-hw-02-phonebook/src/components/ContactList/ContactList.jsx"],"names":["PropTypes","ContactList","contacts","filter","onDeleteContact","filteredContacts","contact","name","toLowerCase","trim","includes","map","number","propTypes","string","isRequired","array"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,WAAW,GAAG,QAA2C;AAAA,MAA1C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAA0C;AAC7D,QAAMC,gBAAgB,GAAGH,QAAQ,CAACC,MAAT,CAAgBG,OAAO,IAC9CA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,IAA3B,GAAkCC,QAAlC,CAA2CP,MAAM,CAACK,WAAP,GAAqBC,IAArB,EAA3C,CADuB,CAAzB;AAGA,sBACE;AAAA,cACGN,MAAM,KAAK,EAAX,GACGD,QAAQ,CAACS,GAAT,CAAaL,OAAO,iBAClB;AAAA,8BACE;AAAA,mBACGA,OAAO,CAACC,IADX,QACmBD,OAAO,CAACM,MAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAE,MAAMR,eAAe,CAACE,OAAO,CAACC,IAAT,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,OAASD,OAAO,CAACC,IAAjB;AAAA;AAAA;AAAA;AAAA,YADF,CADH,GAcGF,gBAAgB,CAACM,GAAjB,CAAqBL,OAAO,iBAC1B;AAAA,8BACE;AAAA,mBACGA,OAAO,CAACC,IADX,QACmBD,OAAO,CAACM,MAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,OAAO,EAAE,MAAMR,eAAe,CAACE,OAAO,CAACC,IAAT,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,OAASD,OAAO,CAACC,IAAjB;AAAA;AAAA;AAAA;AAAA,YADF;AAfN;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAnCD;;KAAMN,W;AAqCNA,WAAW,CAACY,SAAZ,GAAwB;AACtBV,EAAAA,MAAM,EAAEH,SAAS,CAACc,MAAV,CAAiBC,UADH;AAEtBb,EAAAA,QAAQ,EAAEF,SAAS,CAACgB,KAAV,CAAgBD;AAFJ,CAAxB;AAKA,eAAed,WAAf","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ contacts, filter, onDeleteContact }) => {\r\n  const filteredContacts = contacts.filter(contact =>\r\n    contact.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\r\n  );\r\n  return (\r\n    <ul>\r\n      {filter === ''\r\n        ? contacts.map(contact => (\r\n            <li key={contact.name}>\r\n              <p>\r\n                {contact.name}: {contact.number}\r\n              </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(contact.name)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))\r\n        : filteredContacts.map(contact => (\r\n            <li key={contact.name}>\r\n              <p>\r\n                {contact.name}: {contact.number}\r\n              </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(contact.name)}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n"]},"metadata":{},"sourceType":"module"}