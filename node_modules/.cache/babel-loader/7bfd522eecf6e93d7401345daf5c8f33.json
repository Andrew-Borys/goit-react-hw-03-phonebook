{"ast":null,"code":"var _jsxFileName = \"C:\\\\work\\\\REACT-HW\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\Filter\\\\Filter.jsx\";\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Filter = _ref => {\n  let {\n    filter,\n    onInputEntry\n  } = _ref;\n  const filterInputId = nanoid();\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: filterInputId,\n    children: [\"Find contacts by name\", /*#__PURE__*/_jsxDEV(\"input\", {\n      id: filterInputId,\n      type: \"text\",\n      value: filter,\n      onChange: onInputEntry,\n      pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n      title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Filter;\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onInputEntry: PropTypes.func.isRequired\n};\nexport default Filter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Filter\");","map":{"version":3,"sources":["C:/work/REACT-HW/goit-react-hw-02-phonebook/src/components/Filter/Filter.jsx"],"names":["PropTypes","nanoid","Filter","filter","onInputEntry","filterInputId","propTypes","string","isRequired","func"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,MAAMC,MAAM,GAAG,QAA8B;AAAA,MAA7B;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAA6B;AAC3C,QAAMC,aAAa,GAAGJ,MAAM,EAA5B;AAEA,sBACE;AAAO,IAAA,OAAO,EAAEI,aAAhB;AAAA,qDAEE;AACE,MAAA,EAAE,EAAEA,aADN;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAEF,MAHT;AAIE,MAAA,QAAQ,EAAEC,YAJZ;AAKE,MAAA,OAAO,EAAC,wHALV;AAME,MAAA,KAAK,EAAC,wIANR;AAOE,MAAA,QAAQ;AAPV;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjBD;;KAAMF,M;AAmBNA,MAAM,CAACI,SAAP,GAAmB;AACjBH,EAAAA,MAAM,EAAEH,SAAS,CAACO,MAAV,CAAiBC,UADR;AAEjBJ,EAAAA,YAAY,EAAEJ,SAAS,CAACS,IAAV,CAAeD;AAFZ,CAAnB;AAKA,eAAeN,MAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst Filter = ({ filter, onInputEntry }) => {\r\n  const filterInputId = nanoid();\r\n\r\n  return (\r\n    <label htmlFor={filterInputId}>\r\n      Find contacts by name\r\n      <input\r\n        id={filterInputId}\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={onInputEntry}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onInputEntry: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n"]},"metadata":{},"sourceType":"module"}