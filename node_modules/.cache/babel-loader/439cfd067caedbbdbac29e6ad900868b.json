{"ast":null,"code":"var _jsxFileName = \"C:\\\\work\\\\REACT-HW\\\\goit-react-hw-02-phonebook\\\\src\\\\components\\\\Filter\\\\Filter.jsx\";\nimport { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Filter = _ref => {\n  let {\n    handleInputChange\n  } = _ref;\n  filterInputId = nanoid();\n\n  handleInputChange = event => {\n    const {\n      value\n    } = event.currentTarget;\n    this.props.onSubmit(value.toLowerCase().trim());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: filterInputId,\n    children: [\"Find contacts by name\", /*#__PURE__*/_jsxDEV(\"input\", {\n      // placeholder=\"Enter name\"\n      id: this.filterInputId,\n      type: \"text\",\n      name: \"filter\" // value={event.currentTarget}\n      ,\n      onChange: this.handleInputChange,\n      pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n      title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Filter;\nexport default Filter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Filter\");","map":{"version":3,"sources":["C:/work/REACT-HW/goit-react-hw-02-phonebook/src/components/Filter/Filter.jsx"],"names":["Component","nanoid","Filter","handleInputChange","filterInputId","event","value","currentTarget","props","onSubmit","toLowerCase","trim"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAEA,MAAMC,MAAM,GAAG,QAA2B;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AACxCC,EAAAA,aAAa,GAAGH,MAAM,EAAtB;;AAEAE,EAAAA,iBAAiB,GAAGE,KAAK,IAAI;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAK,CAACE,aAAxB;AAEA,SAAKC,KAAL,CAAWC,QAAX,CAAoBH,KAAK,CAACI,WAAN,GAAoBC,IAApB,EAApB;AACD,GAJD;;AAMA,sBACE;AAAO,IAAA,OAAO,EAAEP,aAAhB;AAAA,qDAEE;AACE;AACA,MAAA,EAAE,EAAE,KAAKA,aAFX;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,IAAI,EAAC,QAJP,CAKE;AALF;AAME,MAAA,QAAQ,EAAE,KAAKD,iBANjB;AAOE,MAAA,OAAO,EAAC,wHAPV;AAQE,MAAA,KAAK,EAAC,wIARR;AASE,MAAA,QAAQ;AATV;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAzBD;;KAAMD,M;AA2BN,eAAeA,MAAf","sourcesContent":["import { Component } from 'react';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst Filter = ({ handleInputChange }) => {\r\n  filterInputId = nanoid();\r\n\r\n  handleInputChange = event => {\r\n    const { value } = event.currentTarget;\r\n\r\n    this.props.onSubmit(value.toLowerCase().trim());\r\n  };\r\n\r\n  return (\r\n    <label htmlFor={filterInputId}>\r\n      Find contacts by name\r\n      <input\r\n        // placeholder=\"Enter name\"\r\n        id={this.filterInputId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        // value={event.currentTarget}\r\n        onChange={this.handleInputChange}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n"]},"metadata":{},"sourceType":"module"}